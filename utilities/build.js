/**
 * Generated by claude.ai
 * - [ ] convert single line breaks to <br />, but keep double line breaks to paragraph breaks
 * - [ ] get html title from md front matter
 * - [ ] get template name from md front matter, but fall back to default index.md template
 * - [ ] remove md front matter before parsing into html
 */
import { promises as fs } from 'fs'
import { join, parse } from 'path'

async function convertTextToHtml() {
  try {
    // Load template
    const template = await fs.readFile('templates/index.html', 'utf-8')

    // Get content/*.md
    const contentFiles = await fs.readdir('content')
    const contentMd = contentFiles.filter(file => file.endsWith('.md'))

    // Get public/*.html
    const publicFiles = await fs.readdir('public')
    const publicHtml = publicFiles.filter(file => file.endsWith('.html'))

    // Delete HTML files that don't have corresponding markdown files
    const expectedHtmlFiles = new Set(
      contentMd.map(file => `${parse(file).name}.html`)
    )
    for (const htmlFile of publicHtml) {
      if (!expectedHtmlFiles.has(htmlFile)) {
        await fs.unlink(join('public', htmlFile))
        console.log(`Deleted orphaned file: ${htmlFile}`)
      }
    }

    // Process each markdown file
    for (const file of contentMd) {
      // Read content
      const content = await fs.readFile(join('content', file), 'utf-8')

      // Convert double line breaks to paragraphs
      const htmlContent = content
        .replace(/\r\n/g, '\n')
        .split('\n\n')
        .map(paragraph => `<p>${paragraph.trim()}</p>`)
        .join('\n')

      // Replace placeholders in template
      const fullHtml = template
        .replace('{{title}}', parse(file).name)
        .replace('{{content}}', htmlContent)

      // Write HTML file
      const outputPath = `public/${parse(file).name}.html`
      await fs.writeFile(outputPath, fullHtml)

      console.log(`Built content/${file} â†’ ${outputPath}`)
    }

    console.log('Done!')
    console.log('')

  } catch (error) {
    console.error('Build failed:', error)
    process.exit(1)
  }
}

convertTextToHtml()